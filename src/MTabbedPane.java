


import java.awt.Color;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.plaf.basic.BasicSplitPaneUI;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Harsh
 */
public class MTabbedPane extends javax.swing.JComponent {

    //@tabType
    public static int VERTICAL = 0;
    //@tabType
    public static int HORIZONTAL = 1;
    
    int tabType;
    Vector<MToggleButton> tabHeadVector;
    Vector<Component> tabViewVector;
    int selectedTab;
    int tabHeadWidth = 180;
    int tabHeadHeight = 30;

    /**
     * Creates new form MTabbedPane
     */
    public MTabbedPane() {
        initComponents();
        tabHeadVector = new Vector();
        tabViewVector = new Vector();
    }

    public void addTab(String head, Component view) {
        MToggleButton h = new MToggleButton();
        h.setText(head);
        h.setButtonColors(Color.WHITE, Color.BLACK);
        h.setTextColors(Color.BLACK, Color.WHITE);
        h.setToolTipText(tabHeadVector.size() + "");
        h.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                MToggleButton m = (MToggleButton) e.getComponent();
                int i = Integer.parseInt(m.getToolTipText());
                setSelectedTab(i);
            }

        });
        tabHeadVector.add(h);
        tabViewVector.add(view);
        tabHeads.add(h);
        h.setBounds(0, 0, tabHeadWidth, tabHeadHeight);
        if (getTabCount() == 1) {
            setSelectedTab(selectedTab);
        }
        jSplitPane1.setDividerLocation(tabHeadWidth);
    }

    public void setSelectedTab(int SELECTED_TAB) {
        this.selectedTab = SELECTED_TAB;
        for (int i = 0; i < tabHeadVector.size(); i++) {
            MToggleButton b = tabHeadVector.get(i);
            b.setSelected(i == SELECTED_TAB);
            if (i == SELECTED_TAB) {
            }
        }
        tabViews.removeAll();
        for (int i = 0; i < tabViewVector.size(); i++) {
            if (i == SELECTED_TAB) {
                tabViews.add(tabViewVector.get(i));
                break;
            }
        }
        jSplitPane1.setDividerLocation((tabType==VERTICAL)?30:180);
        tabViews.revalidate();
        tabViews.repaint();
        tabHeads.revalidate();
        tabHeads.repaint();
        processTabItemStateEvent(new TabItemEvent(this, this.selectedTab));
    }

    public Vector<String> listAllTabs() {
        Vector<String> TABS = new Vector<>();
        for (int i = 0; i < tabHeadVector.size(); i++) {
            TABS.add(tabHeadVector.get(i).getText());
        }
        return TABS;
    }

    public int getSelectedTab() {
        return selectedTab;
    }

    public int getTabCount() {
        return tabHeadVector.size();
    }

    public int getTabHeadWidth() {
        return tabHeadWidth;
    }

    public void setTabHeadWidth(int tabHeadWidth) {
        this.tabHeadWidth = tabHeadWidth;
    }

    public void setTabHeadHeight(int tabHeadHeight) {
        this.tabHeadHeight = tabHeadHeight;
    }

    public int getTabHeadHeight() {
        return tabHeadHeight;
    }

    public int getTabType() {
        return tabType;
    }

    public void setTabType(int tabType) {
        this.tabType = tabType;
        if(tabType==HORIZONTAL) {
            tabHeads.setLayout(new FlowLayout());
            jSplitPane1.setOrientation(jSplitPane1.HORIZONTAL_SPLIT);
            jSplitPane1.setDividerLocation(180);
        } else if(tabType==VERTICAL) {
            tabHeads.setLayout(new FlowLayout());
            jSplitPane1.setOrientation(jSplitPane1.VERTICAL_SPLIT);
            jSplitPane1.setDividerLocation(30);
        }
        jSplitPane1.revalidate();
        jSplitPane1.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jSplitPane1 = new javax.swing.JSplitPane();
        tabHeads = new javax.swing.JPanel();
        tabViews = new javax.swing.JPanel();

        jSplitPane1.setBorder(null);
        jSplitPane1.setDividerLocation(180);
        jSplitPane1.setDividerSize(0);

        tabHeads.setBackground(new java.awt.Color(255, 255, 255));
        tabHeads.setPreferredSize(new java.awt.Dimension(180, 440));
        jSplitPane1.setLeftComponent(tabHeads);

        tabViews.setBackground(new java.awt.Color(249, 249, 249));
        tabViews.setLayout(new java.awt.CardLayout());
        jSplitPane1.setRightComponent(tabViews);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 670, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel tabHeads;
    private javax.swing.JPanel tabViews;
    // End of variables declaration//GEN-END:variables

    private ArrayList<TabItemStateListener> tabItemStateListenerList = new ArrayList<TabItemStateListener>();

    public synchronized void addTabItemStateListener(TabItemStateListener listener) {
        if (!tabItemStateListenerList.contains(listener)) {
            tabItemStateListenerList.add(listener);
        }
    }

    private void processTabItemStateEvent(TabItemEvent speedEvent) {
        ArrayList<TabItemStateListener> tempTabItemStateListener;

        synchronized (this) {
            if (tabItemStateListenerList.size() == 0) {
                return;
            }
            tempTabItemStateListener = (ArrayList<TabItemStateListener>) tabItemStateListenerList.clone();
        }

        for (TabItemStateListener listener : tempTabItemStateListener) {
            listener.selectedTabChanged(speedEvent);
        }
    }
}
